# security 配置
# 相关介绍，组件直接在启动类引入注解 @EnableSecurityConfig 注解即可
# 在def包下面提供了一些默认实现（唯一用户名密码admin/admin,基于内存map的token过期策略）
# 定义你自己的实现覆盖def包下面的实现，即可替换功能
# 常见的替换：（注意，是从新实现你自己的实现，而不是写一个同名的或者其他的,或者，直接继承这些默认实现，部分修改之后加入context）
# DefaultUserDetailsService 用于获取数据库用户名密码
# DefaultTokenHolder 用于从redis等其他魂村实现token过期策略
# 如果你开启了支持json-post方式登录，那么你还可以定义您自己的登录密码解密器加入环境中
# 你只需要实现接口 LoginPasswordDecoder 即可，默认没有这个解密器，不对密码做任何操作
# --
# 建议返回的UserDetails实现为SecurityUser实现对象
# 建议使用GrantedAuthority的实现为SecurityGrantedAuthority
# 在使用此二者时，在你接入注入RedisCache替换默认的MemCache在TokenHolder中使用时，方便进行序列化与反序列化
# 否则你就需要自己实现可序列化和反序列化的对象实例

# 是否开启springsecurity功能，默认开启
i2f.springboot.config.security.enable=true

# session 管理模式，默认无状态
i2f.springboot.config.security.session-creation-policy=STATELESS
# 忽略访问名单，默认无
i2f.springboot.config.security.ignore-list=/actuator/**,/swagger*/**,/*/api*,/api2/**,/webjars*,/druid/**
# 匿名访问名单，默认无
i2f.springboot.config.security.anonymous-list=/actuator/**
# 完全开放访问名单，默认无
i2f.springboot.config.security.permit-all-list=/**/*.html
# 完全开放仅GET方式访问的资源，默认页面文件
i2f.springboot.config.security.static-resource-list=/**/*.html,/**/*.css,/**/*.js,/**/*.png,/**/*.jpg,/**/*.jpeg

# 是否开启csrf,默认关闭
i2f.springboot.config.security.csrf.enable=true
# 是否开启cors,默认开启
i2f.springboot.config.security.cors.enable=true
# 是否开启表单登录，默认开启
i2f.springboot.config.security.form-login.enable=true
# 是否开启http-basic,默认关闭
i2f.springboot.config.security.http-basic.enable=true
# 是否开启无权限403响应返回，默认开启
i2f.springboot.config.security.enable-exception-handler=true

# 是否支持json-post方式登录，默认支持
i2f.springboot.config.security.login-json.enable=true
# 登录请求的path,默认/login
i2f.springboot.config.security.login-url=/login
# 登录请求的用户名属性名，默认username
i2f.springboot.config.security.login-username=username
# 登录请求的用户密码属性名，默认password
i2f.springboot.config.security.login-password=password

# 是否开启单点登录，在默认实现中生效，默认开启单点登录
i2f.springboot.config.security.login-single.enable=true

# 默认的实现中的用户名密码配置,可以配置多个，每一个用分号分隔
# 一个完整用户配置如下
# {username}/{password}={authoritys}
# 其中authoritys可以有多个
# {role},{permission},{permission}
# 举例：admin/admin=ROLE_admin,sys:config:manage
# 表示：用户admin，密码admin,具有角色ROLE_admin,具有权限sys:config:manage
# authoritys可以为空，如下
i2f.springboot.config.security.default-impl-login.users=admin/admin=ROLE_admin,sys:config:manage;user/123456

# ############################################################################################
# 权限控制
# 这里主要是spring-security默认的方式和支持js250规范的方式
# 需要开始注解支持，本模块中默认开启了
# @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true,jsr250Enabled = true)
# securedEnabled = true 是开启方法注解权限判断
# prePostEnabled = true 是开启支持spring-security方式
# jsr250Enabled = true 是开启支持js250方式
# ############################################################################################
# spring-security 的方式
# 通过 @PreAuthorize 注解实现
# 注解默认支持的方法有 hasAuthority、hasAnyAuthority、hasRole、hasAnyRole
# 这些方法都可以在 org.springframework.security.access.expression.SecurityExpressionRoot 中进行源码查看
# 经过源码查看之后
# 首先，搞清楚一点，权限是在哪里设置给spring-security的
# 是在登录时，也就是我们实现了自己的登录对象服务
# org.springframework.security.core.userdetails.UserDetailsService
# 我们返回了一个登录用户细节对象
# org.springframework.security.core.userdetails.UserDetails
# 这个对象中，就包含了 Collection<? extends GrantedAuthority> getAuthorities(); 方法
# 这个方法就是授权的权限集合，集合的对象是 org.springframework.security.core.GrantedAuthority
# 他提供了一个接口，用于获取权限描述字符串 String getAuthority();
# hasAuthority、hasAnyAuthority 是直接比较给定的字符串是否在 UserDetails.getAuthorities() 中存在
# hasRole、hasAnyRole 则会判断固定前缀ROLE_+给定字符串是否在  UserDetails.getAuthorities() 中存在
# 举个例子
# UserDetails.getAuthorities() 中我们给定了一下的值
# ROLE_admin,ROLE_root,home:view,/home/index
# 则判断注解可以这样写
# 需要admin角色
# @PreAuthorize("hasRole('admin')")
# 需要具有权限
# @PreAuthorize("hasAuthority('home:view')")
# @PreAuthorize("hasAuthority('/home/index')")
# 当具有多个条件时，满足SPEL表达式语法即可
# @PreAuthorize("hasAuthority('home:view') && hasAnyRole('admin','root')")
# @PreAuthorize("hasAuthority('home:view') and hasAnyRole('admin','root')")
# 当然，由于是SPEL语法，所以，你也可以定义自己的方法
# 加入定义一个bean叫做ss(beanName)，有一个验证方法叫做boolean hasMenu(String str)
# 其中的方法调用即可
# @PreAuthorize("ss.hasMenu('/home/index')")
# ############################################################################################
# js250 的方式
# 同时，也支持JS250的访问控制规范
# 源码在这个类中实现
# org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource
# 可以使用的注解有
# @Secured @RolesAllowed
# 区别是 Secured 不判断有没有ROLE_前缀，RolesAllowed判断ROLE_前缀
# 也就是说，Secured等价于hasAuthority，RolesAllowed等价于hasRole